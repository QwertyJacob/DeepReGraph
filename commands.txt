
#---------------------------------
#---------------------------------
#---------------------------------

torch.quantile(self.D_Z[self.ge_count:,self.ge_count:], torch.tensor([.25,.5,.75,.9]))

torch.quantile(self.S_D[self.ge_count:,:self.ge_count].float(), torch.tensor([.986,.987,.988,.989,.99]))

torch.quantile(self.S.float(), torch.tensor([.986,.987,.989,.99]))



#---------------------------------
#---------------------------------
#---------------------------------

modelname = '/closin3bis'
tensorboard = SummaryWriter(LOG_DIR + modelname)


gae = AdaGAE(X, G, ge_count, ccre_count, distance_matrices, slopes,
             gen_dist_score, init_sparsity, ge_class_labels, ccre_class_labels,
             tensorboard, gene_ds,ccre_ds, device=device, datapath = datapath)



#---------------------------------
#---------------------------------
#---------------------------------

backupsito = gae.backup()


with open('local_models\\backupsito', 'wb') as backup_adagae:
   pickle.dump(backupsito, backup_adagae)

#---------------------------------
#---------------------------------
#---------------------------------

with open('local_models\\backupsito', 'rb') as input_backup_adagae:
    backupsito = pickle.load(input_backup_adagae)

gae.load_state_from(backupsito)
modelname = '/closing2'
tensorboard = SummaryWriter(LOG_DIR + modelname)
gae.tensorboard = tensorboard

#---------------------------------
#---------------------------------
#---------------------------------



#-------------------------------------------------------------------
#  HETEROGENEOUS CLUSTERING:
#  BEST FIRST AND SECOND STEP EVER
#-------------------------------------------------------------------
#step 1
manual_run(gae, max_epoch=10, init_sparsity=101, sparsity_increment=5,
           init_alpha_D=1, final_alpha_D=1,
           init_alpha_G=1, final_alpha_G=0,
           init_alpha_ATAC=.1, final_alpha_ATAC=.1,
           init_alpha_ACET=.1, final_alpha_ACET=.1,
           init_alpha_METH=.1, final_alpha_METH=.1,
           init_alpha_Z=0, final_alpha_Z=0,
           init_attractive_loss_weight=0, final_attractive_loss_weight=1,
           init_repulsive_loss_weight=1, final_repulsive_loss_weight=0,
           max_iter=15,
            init_wk_ATAC=1,
           final_wk_ATAC=1,
           init_wk_ACET=0,
           final_wk_ACET=0,
           init_wk_METH=0,
           final_wk_METH=0)



#step 2
manual_run(gae, max_epoch=10, init_sparsity=152, sparsity_increment=5,
            init_alpha_D=1, final_alpha_D=1,
            init_alpha_G=0.0, final_alpha_G=0.0,
            init_alpha_ATAC=0.0, final_alpha_ATAC=0.0,
            init_alpha_ACET=0.0, final_alpha_ACET=0.0,
            init_alpha_METH=0.0, final_alpha_METH=0.0,
            init_alpha_Z=0.1, final_alpha_Z=.1,
            init_attractive_loss_weight=1, final_attractive_loss_weight=1,
            init_repulsive_loss_weight=0, final_repulsive_loss_weight=0,
            max_iter=15,
            init_wk_ATAC=1,
           final_wk_ATAC=1,
           init_wk_ACET=0,
           final_wk_ACET=0,
           init_wk_METH=0,
           final_wk_METH=0)





###########################
#############################
#############################


#-------------------------------------------------------------------
#  HOMOGENOUS CLUSTERING:
#  BEST FIRST AND SECOND STEP EVER
#-------------------------------------------------------------------

gae.global_ccres_over_genes_ratio = 4
gae.differential_sparsity = True


#step 1
manual_run(gae, max_epoch=10, init_sparsity=101, sparsity_increment=5,
           init_alpha_D=0, final_alpha_D=0,
           init_alpha_G=1, final_alpha_G=0,
           init_alpha_ATAC=1, final_alpha_ATAC=0,
           init_alpha_ACET=1, final_alpha_ACET=0,
           init_alpha_METH=1, final_alpha_METH=0,
           init_alpha_Z=0, final_alpha_Z=1,
           init_attractive_loss_weight=0, final_attractive_loss_weight=1,
           init_repulsive_loss_weight=1, final_repulsive_loss_weight=0,
           max_iter=30,
            init_wk_ATAC=1,
           final_wk_ATAC=1,
           init_wk_ACET=0,
           final_wk_ACET=0,
           init_wk_METH=0,
           final_wk_METH=0)



#step 2
manual_run(gae, max_epoch=10, init_sparsity=152, sparsity_increment=1,
            init_alpha_D=0, final_alpha_D=0,
            init_alpha_G=0.5, final_alpha_G=0.0,
            init_alpha_ATAC=0.5, final_alpha_ATAC=0.0,
            init_alpha_ACET=0.1, final_alpha_ACET=0.0,
            init_alpha_METH=0.1, final_alpha_METH=0.0,
            init_alpha_Z=1, final_alpha_Z=1,
            init_attractive_loss_weight=1, final_attractive_loss_weight=1,
            init_repulsive_loss_weight=0, final_repulsive_loss_weight=0,
            max_iter=30,
            init_wk_ATAC=1,
           final_wk_ATAC=1,
           init_wk_ACET=0,
           final_wk_ACET=0,
           init_wk_METH=0,
           final_wk_METH=0)




###########################
#############################
#############################

gae.run_1_epoch(current_sparsity=101,alpha_D=1, attractive_loss_weight=1,repulsive_loss_weight=1,
                    alpha_G=0.1,alpha_ATAC=0.1,alpha_ACET=0.1,alpha_METH=0.1,alpha_Z=0,max_iter=15)
gae.plot_graph()


#####################
##################
####################


    #
    # alpha_SYMMs = [0.5, 0]
    # alpha_Ds = [0, 1]
    # alpha_value_index = 0
    # alphaD = alpha_Ds[alpha_value_index]
    # alphaG = alpha_SYMMs[alpha_value_index]
    # alphaATAC = alpha_SYMMs[alpha_value_index]
    # alphaACET = alpha_SYMMs[alpha_value_index]
    # alphaMETH = alpha_SYMMs[alpha_value_index]
    #
    # def toogle_alphas():
    #     global alphaD, alphaG, alphaATAC, alphaACET, alphaMETH
    #     global alpha_value_index
    #
    #     alpha_value_index += 1
    #
    #     alphaD = alpha_Ds[alpha_value_index%2]
    #     alphaG = alpha_SYMMs[alpha_value_index%2]
    #     alphaACET = alpha_SYMMs[alpha_value_index%2]
    #     alphaATAC = alpha_SYMMs[alpha_value_index%2]
    #     alphaMETH = alpha_SYMMs[alpha_value_index%2]
    #
    #
    #
    # curr_spars = 300
    # max_epochs = 10
    # iters_per_epoch = 45
    # init_alphaZ = 0.3
    # final_alphaZ = 1
    # init_attr = 1000
    # final_attr = 1000
    # init_rep = 100
    # final_rep = 100
    # T = max_epochs * iters_per_epoch
    # for epochs in range(0,max_epochs):
    #
    #     toogle_alphas()
    #     alphaZ = 1
    #     rep = gae.get_dinamic_param(init_rep, final_rep, T)
    #     attr_force = gae.get_dinamic_param(init_attr, final_attr, T)
    #     gae.run_1_epoch(current_sparsity=curr_spars, alpha_D=alphaD, attractive_loss_weight=attr_force,
    #                     repulsive_loss_weight=rep, alpha_G=alphaG, alpha_ATAC=alphaATAC, alpha_ACET=alphaACET,
    #                     alpha_METH=alphaMETH, alpha_Z=alphaZ, max_iter=iters_per_epoch)
    #     gae.plot_classes()
    #
    #     tensorboard.close()
    #     #fixed_spars_run(gae)
    #
